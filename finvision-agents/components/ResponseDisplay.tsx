import React from 'react';
import { Source } from '../types';
import { ExternalLinkIcon, InfoIcon, LogoIcon, ErrorIcon } from './icons';

interface ResponseDisplayProps {
  response: string | null;
  sources: Source[];
  isLoading: boolean;
  error: string | null;
}

const TypingEffect: React.FC<{text: string}> = ({ text }) => {
    const [displayedText, setDisplayedText] = React.useState('');
    
    React.useEffect(() => {
        setDisplayedText('');
        if (!text) return;
        let i = 0;
        const intervalId = setInterval(() => {
            if (i < text.length) {
                setDisplayedText(prev => prev + text.charAt(i));
                i++;
            } else {
                clearInterval(intervalId);
            }
        }, 5);
        return () => clearInterval(intervalId);
    }, [text]);

    // This component will render the raw text, and the parent's `prose` class will style it.
    // This is a simple way to get markdown-like formatting for lists, bolding etc.
    return <div className="whitespace-pre-wrap font-sans text-gray-300 leading-relaxed">{displayedText}</div>;
};

export const ResponseDisplay: React.FC<ResponseDisplayProps> = ({ response, sources, isLoading, error }) => {
  if (error) {
    return (
      <div className="bg-surface border border-danger/50 rounded-lg p-6 text-center animate-fadeInUp flex flex-col items-center shadow-lg">
        <ErrorIcon className="h-12 w-12 text-danger mb-4" />
        <h3 className="text-xl font-semibold text-danger">Analysis Failed</h3>
        <p className="mt-2 text-red-300 max-w-md">{error}</p>
      </div>
    );
  }

  if (isLoading && !response) {
    return (
      <div className="bg-surface border border-border rounded-lg p-6 text-center animate-fadeInUp flex flex-col items-center shadow-lg">
        <LogoIcon className="h-12 w-12 text-primary animate-pulse_subtle mb-4" />
        <h3 className="text-xl font-semibold text-primary">Generating Analysis...</h3>
        <p className="mt-2 text-subtle">The agents are working. This may take a moment.</p>
      </div>
    );
  }

  if (!response && !isLoading) {
    return null;
  }

  return (
    <div className="bg-surface border border-border rounded-lg p-6 animate-fadeInUp shadow-xl">
      <h2 className="text-2xl font-bold mb-4 text-gray-100">Analysis Result</h2>
      <div className="prose prose-invert max-w-none">
         {response ? <TypingEffect text={response} /> : <div className="h-24" />}
      </div>

      {sources && sources.length > 0 && (
        <div className="mt-8 pt-6 border-t border-border">
          <h3 className="text-xl font-semibold mb-4 text-gray-200">Sources</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {sources.map((source, index) => (
              <a
                key={index}
                href={source.url}
                target="_blank"
                rel="noopener noreferrer"
                className="block bg-surface-light p-4 rounded-lg border border-border hover:border-primary transition-all duration-300 group hover:shadow-lg hover:-translate-y-1"
              >
                <p className="font-semibold text-primary/90 group-hover:text-primary truncate">{source.title}</p>
                <div className="flex items-center space-x-2 mt-1">
                    <p className="text-xs text-subtle truncate">{source.url}</p>
                    <ExternalLinkIcon className="h-3 w-3 text-subtle flex-shrink-0" />
                </div>
              </a>
            ))}
          </div>
          <div className="flex items-start space-x-3 mt-6 p-4 bg-background rounded-md border border-border/80">
            <InfoIcon className="h-5 w-5 text-subtle flex-shrink-0 mt-0.5" />
            <p className="text-xs text-subtle">For demonstration purposes, these sources are synthetically generated by the AI to mimic a real RAG system.</p>
          </div>
        </div>
      )}
    </div>
  );
};